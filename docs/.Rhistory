scale_color_manual(
values = c("Not disabled" = "red", "Disabled" = "blue"),
name = "Legend"
) +
geom_vline(xintercept = c(4, 13), linetype = "dashed", color = "grey29") +
annotate("text", x = 5, y = .4, label = "Moderate", hjust = 1.5, color = "grey29", angle = 90) +
annotate("text", x = 14, y = .38, label = "Severe", hjust = 1.5, color = "grey29", angle = 90) +
theme_bw() +
theme(legend.position = c(0.858, 0.122),  # Adjust the position as needed
legend.background = element_rect(fill = "white"),
legend.box.background = element_rect(color = "black"))
## using digital tools refer mhpro
ggplot(df, aes(x = x)) +
geom_point(aes(y = mhprodis, color = 'Disabled'), size = 2, show.legend = TRUE) +
geom_smooth(aes(y = mhprodis, color = 'Disabled'), se = FALSE, linetype = 'solid', show.legend = TRUE) +
geom_line(aes(y = mhprolowerdis), color = 'red', linetype = 'dashed', alpha = 0.5) +
geom_line(aes(y = mhproupperdis), color = 'red', linetype = 'dashed', alpha = 0.5) +
geom_point(aes(y = mhpronodis, color = 'Not disabled'), size = 2, show.legend = TRUE) +
geom_smooth(aes(y = mhpronodis, color = 'Not disabled'), se = FALSE, linetype = 'solid', show.legend = TRUE) +
geom_line(aes(y = mhprolowernodis), color = 'blue', linetype = 'dashed', alpha = 0.5) +
geom_line(aes(y = mhprouppernodis), color = 'blue', linetype = 'dashed', alpha = 0.5) +
labs(x = 'Distress score', y = 'Probability', title = 'a') +
scale_x_continuous(breaks = c(0, 4, 8, 12, 16, 20, 24)) +
scale_color_manual(
values = c("Not disabled" = "red", "Disabled" = "blue"),
name = "Legend"
) +
geom_vline(xintercept = c(4, 13), linetype = "dashed", color = "grey29") +
annotate("text", x = 5, y = .4, label = "Moderate", hjust = 1.5, color = "grey29", angle = 90) +
annotate("text", x = 14, y = .38, label = "Severe", hjust = 1.5, color = "grey29", angle = 90) +
theme_bw() +
theme(legend.position = c(0.858, 0.122),  # Adjust the position as needed
legend.background = element_rect(fill = "white"),
legend.box.background = element_rect(color = "black"))
# Plot seeking online mental health
ggplot(df, aes(x = x)) +
geom_point(aes(y = onlinehelpdis, color = 'Disabled'), size = 2, show.legend = TRUE) +
geom_smooth(aes(y = onlinehelpdis, color = 'Disabled'), se = FALSE, linetype = 'solid', show.legend = TRUE) +
geom_line(aes(y = onlinelowerdis), color = 'blue', linetype = 'dashed', alpha = 0.5) +
geom_line(aes(y = onlineupperdis), color = 'blue', linetype = 'dashed', alpha = 0.5) +
geom_point(aes(y = onlinehelpnodis, color = 'Not disabled'), size = 2, show.legend = TRUE) +
geom_smooth(aes(y = onlinehelpnodis, color = 'Not disabled'), se = FALSE, linetype = 'solid', show.legend = TRUE) +
geom_line(aes(y = onlinelowernodis), color = 'red', linetype = 'dashed', alpha = 0.5) +
geom_line(aes(y = onlineuppernodis), color = 'red', linetype = 'dashed', alpha = 0.5) +
labs(x = 'Distress score', y = 'Probability', title = 'a') +
scale_x_continuous(breaks = c(0, 4, 8, 12, 16, 20, 24)) +
scale_color_manual(
values = c("Not disabled" = "red", "Disabled" = "blue"),
name = "Legend"
) +
geom_vline(xintercept = c(4, 13), linetype = "dashed", color = "grey29") +
annotate("text", x = 5, y = .5, label = "Moderate", hjust = 1.5, color = "grey29", angle = 90) +
annotate("text", x = 14, y = .48, label = "Severe", hjust = 1.5, color = "grey29", angle = 90) +
theme_bw() +
theme(legend.position = c(0.858, 0.122),  # Adjust the position as needed
legend.background = element_rect(fill = "white"),
legend.box.background = element_rect(color = "black"))
## using online tools to help connect with others similar
ggplot(df, aes(x = x)) +
geom_point(aes(y = connectdis, color = 'Disabled'), size = 2, show.legend = TRUE) +
geom_smooth(aes(y = connectdis, color = 'Disabled'), se = FALSE, linetype = 'solid', show.legend = TRUE) +
geom_line(aes(y = connectlowerdis), color = 'blue', linetype = 'dashed', alpha = 0.5) +
geom_line(aes(y = connectupperdis), color = 'blue', linetype = 'dashed', alpha = 0.5) +
geom_point(aes(y = connectnodis, color = 'Not disabled'), size = 2, show.legend = TRUE) +
geom_smooth(aes(y = connectnodis, color = 'Not disabled'), se = FALSE, linetype = 'solid', show.legend = TRUE) +
geom_line(aes(y = connectlowernodis), color = 'red', linetype = 'dashed', alpha = 0.5) +
geom_line(aes(y = connectuppernodis), color = 'red', linetype = 'dashed', alpha = 0.5) +
labs(x = 'Distress score', y = 'Probability', title = 'b') +
scale_x_continuous(breaks = c(0, 4, 8, 12, 16, 20, 24)) +
scale_color_manual(
values = c("Not disabled" = "red", "Disabled" = "blue"),
name = "Legend"
) +
geom_vline(xintercept = c(4, 13), linetype = "dashed", color = "grey29") +
annotate("text", x = 5, y = .4, label = "Moderate", hjust = 1.5, color = "grey29", angle = 90) +
annotate("text", x = 14, y = .38, label = "Severe", hjust = 1.5, color = "grey29", angle = 90) +
theme_bw() +
theme(legend.position = c(0.858, 0.122),  # Adjust the position as needed
legend.background = element_rect(fill = "white"),
legend.box.background = element_rect(color = "black"))
## using digital tools refer mhpro
ggplot(df, aes(x = x)) +
geom_point(aes(y = mhprodis, color = 'Disabled'), size = 2, show.legend = TRUE) +
geom_smooth(aes(y = mhprodis, color = 'Disabled'), se = FALSE, linetype = 'solid', show.legend = TRUE) +
geom_line(aes(y = mhprolowerdis), color = 'red', linetype = 'dashed', alpha = 0.5) +
geom_line(aes(y = mhproupperdis), color = 'red', linetype = 'dashed', alpha = 0.5) +
geom_point(aes(y = mhpronodis, color = 'Not disabled'), size = 2, show.legend = TRUE) +
geom_smooth(aes(y = mhpronodis, color = 'Not disabled'), se = FALSE, linetype = 'solid', show.legend = TRUE) +
geom_line(aes(y = mhprolowernodis), color = 'blue', linetype = 'dashed', alpha = 0.5) +
geom_line(aes(y = mhprouppernodis), color = 'blue', linetype = 'dashed', alpha = 0.5) +
labs(x = 'Distress score', y = 'Probability', title = 'c') +
scale_x_continuous(breaks = c(0, 4, 8, 12, 16, 20, 24)) +
scale_color_manual(
values = c("Not disabled" = "red", "Disabled" = "blue"),
name = "Legend"
) +
geom_vline(xintercept = c(4, 13), linetype = "dashed", color = "grey29") +
annotate("text", x = 5, y = .4, label = "Moderate", hjust = 1.5, color = "grey29", angle = 90) +
annotate("text", x = 14, y = .38, label = "Severe", hjust = 1.5, color = "grey29", angle = 90) +
theme_bw() +
theme(legend.position = c(0.858, 0.122),  # Adjust the position as needed
legend.background = element_rect(fill = "white"),
legend.box.background = element_rect(color = "black"))
# Plot seeking online mental health
ggplot(df, aes(x = x)) +
geom_point(aes(y = onlinehelpdis, color = 'Disabled'), size = 2, show.legend = TRUE) +
geom_smooth(aes(y = onlinehelpdis, color = 'Disabled'), se = FALSE, linetype = 'solid', show.legend = TRUE) +
geom_line(aes(y = onlinelowerdis), color = 'blue', linetype = 'dashed', alpha = 0.5) +
geom_line(aes(y = onlineupperdis), color = 'blue', linetype = 'dashed', alpha = 0.5) +
geom_point(aes(y = onlinehelpnodis, color = 'Not disabled'), size = 2, show.legend = TRUE) +
geom_smooth(aes(y = onlinehelpnodis, color = 'Not disabled'), se = FALSE, linetype = 'solid', show.legend = TRUE) +
geom_line(aes(y = onlinelowernodis), color = 'red', linetype = 'dashed', alpha = 0.5) +
geom_line(aes(y = onlineuppernodis), color = 'red', linetype = 'dashed', alpha = 0.5) +
labs(x = 'Distress score', y = 'Probability', title = 'a') +
scale_x_continuous(breaks = c(0, 4, 8, 12, 16, 20, 24)) +
scale_color_manual(
values = c("Not disabled" = "red", "Disabled" = "blue"),
name = "Legend"
) +
geom_vline(xintercept = c(4, 13), linetype = "dashed", color = "grey29") +
annotate("text", x = 5, y = .5, label = "Moderate", hjust = 1.5, color = "grey29", angle = 90) +
annotate("text", x = 14, y = .48, label = "Severe", hjust = 1.5, color = "grey29", angle = 90) +
theme_bw() +
theme(legend.position = c(0.858, 0.122),  # Adjust the position as needed
legend.background = element_rect(fill = "white"),
legend.box.background = element_rect(color = "black"))
## using online tools to help connect with others similar
ggplot(df, aes(x = x)) +
geom_point(aes(y = connectdis, color = 'Disabled'), size = 2, show.legend = TRUE) +
geom_smooth(aes(y = connectdis, color = 'Disabled'), se = FALSE, linetype = 'solid', show.legend = TRUE) +
geom_line(aes(y = connectlowerdis), color = 'blue', linetype = 'dashed', alpha = 0.5) +
geom_line(aes(y = connectupperdis), color = 'blue', linetype = 'dashed', alpha = 0.5) +
geom_point(aes(y = connectnodis, color = 'Not disabled'), size = 2, show.legend = TRUE) +
geom_smooth(aes(y = connectnodis, color = 'Not disabled'), se = FALSE, linetype = 'solid', show.legend = TRUE) +
geom_line(aes(y = connectlowernodis), color = 'red', linetype = 'dashed', alpha = 0.5) +
geom_line(aes(y = connectuppernodis), color = 'red', linetype = 'dashed', alpha = 0.5) +
labs(x = 'Distress score', y = 'Probability', title = 'b') +
scale_x_continuous(breaks = c(0, 4, 8, 12, 16, 20, 24)) +
scale_color_manual(
values = c("Not disabled" = "red", "Disabled" = "blue"),
name = "Legend"
) +
geom_vline(xintercept = c(4, 13), linetype = "dashed", color = "grey29") +
annotate("text", x = 5, y = .4, label = "Moderate", hjust = 1.5, color = "grey29", angle = 90) +
annotate("text", x = 14, y = .38, label = "Severe", hjust = 1.5, color = "grey29", angle = 90) +
theme_bw() +
theme(legend.position = c(0.858, 0.122),  # Adjust the position as needed
legend.background = element_rect(fill = "white"),
legend.box.background = element_rect(color = "black"))
## using digital tools refer mhpro
ggplot(df, aes(x = x)) +
geom_point(aes(y = mhprodis, color = 'Disabled'), size = 2, show.legend = TRUE) +
geom_smooth(aes(y = mhprodis, color = 'Disabled'), se = FALSE, linetype = 'solid', show.legend = TRUE) +
geom_line(aes(y = mhprolowerdis), color = 'red', linetype = 'dashed', alpha = 0.5) +
geom_line(aes(y = mhproupperdis), color = 'red', linetype = 'dashed', alpha = 0.5) +
geom_point(aes(y = mhpronodis, color = 'Not disabled'), size = 2, show.legend = TRUE) +
geom_smooth(aes(y = mhpronodis, color = 'Not disabled'), se = FALSE, linetype = 'solid', show.legend = TRUE) +
geom_line(aes(y = mhprolowernodis), color = 'blue', linetype = 'dashed', alpha = 0.5) +
geom_line(aes(y = mhprouppernodis), color = 'blue', linetype = 'dashed', alpha = 0.5) +
labs(x = 'Distress score', y = 'Probability', title = 'c') +
scale_x_continuous(breaks = c(0, 4, 8, 12, 16, 20, 24)) +
scale_color_manual(
values = c("Not disabled" = "red", "Disabled" = "blue"),
name = "Legend"
) +
geom_vline(xintercept = c(4, 13), linetype = "dashed", color = "grey29") +
annotate("text", x = 5, y = .4, label = "Moderate", hjust = 1.5, color = "grey29", angle = 90) +
annotate("text", x = 14, y = .38, label = "Severe", hjust = 1.5, color = "grey29", angle = 90) +
theme_bw() +
theme(legend.position = c(0.858, 0.122),  # Adjust the position as needed
legend.background = element_rect(fill = "white"),
legend.box.background = element_rect(color = "black"))
exp(0.90)
exp(0.15)
exp(0.14)
exp(0.1)
exp(0.16)
exp(-0.05)
6720 + 37376
44096-6747
6747/44096*100
2792+2666+719+570
37349/44096*100
2792/44096*100
2666/44096*100
719/44096*100
570/44096*100
1.29+1.63+6.05+6.33+84.70
2279/6747*100
2666/6747*100
719/6747*100
570/6747*100
exp(0.8993)
33.78+39.51
73.29+10.66+8.45
2792+2666+719+570
6747/44096
2792/6747
2666/6747
41.38+39.51
719/6747
570/6747
80.89+10.66+8.45
291+1672+56+295+210
install.packages("prettydoc")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
options(digits = 3)
library(haven)
library(dplyr)
library(tidyr)
library(ggplot2)
library(forcats)
library(nnet)
library(NHANES)
library(MASS)
library(naniar)
library(Hmisc)
library(mice)
library(ggeffects)
library(stringr)
library(kableExtra)
library(parallelly)
library(furrr)
library(lubridate)
library(kableExtra)
library(table1)
library(stringr)
rm(list = ls())
# Chunk 2: working directory and calling our file
setwd("/Users/will/Documents/UCSD/Project 3/Aim 1/Survey/P3Tutorial/docs")
df_raw <- read.csv("FGsurvey.csv", header = T, skip=1) %>%
slice(-1)
# Chunk 3: varname check 1
ls(df_raw)
# Chunk 4: inspect 1
head(df_raw$Start.Date)
tail(df_raw$Start.Date)
# Chunk 5: Cleaning 1
# Asign new dataframe
df <- df_raw
# Filter out empty observations
df <- df %>%
dplyr::filter(Finished=="True")
# Chunk 6: Cleaning 2
# Convert date of birth variable into usable format
df$dob <- mdy(df$Please.enter.your.date.of.birth..MM.DD.YYYY..)
# Convert date of birth to age in years
df <- df %>%
mutate(age = floor(interval(dob, Sys.Date()) / years(1)))
# Table of age group responses
head(df$age)
# Chunk 7: Clean and summarize
# Median
df %>%
summarise(
median_age = median(age, na.rm = TRUE),
iqr_age = IQR(age, na.rm = TRUE)
) %>%
print()
# Boxplot
boxplot(df$age)
# Chunk 8: renaming 1
df <- df %>%
dplyr::rename(gender = Which.gender.best.describes.you....Selected.Choice,
race = Please.select.your.race.from.the.options.below....Selected.Choice,
race_text1 = Please.select.your.race.from.the.options.below....More.than.one.race..please.specify....Text,
race_text2 = Please.select.your.race.from.the.options.below....Other..please.specify....Text,
ethnicity = Please.indicate.your.ethnicity.below.,
position = What.is.your.current.position.job.title.,
length = How.long.have.you.been.in.your.current.role.,
consent = You.are.being.invited.to.participate.in.a.research.study.titled.Developing.and.Testing.a.Team.Communication.Training.Implementation.Strategy.for.Depression.Screening.in.a.Pediatric.Health.Care.System..This.study.is.being.led.by.Drs..Nicole.Stadnick..Ph.D...MPH.and.Lauren.Brookman.Frazee.Ph.D..from.UC.San.Diego..with.collaboration.from.Drs..Amy.Bryl.M.D..and.Cynthia.Kuelbs.M.D..from.Rady.Children.s.Hospital.San.Diego....You.were.selected.to.participate.because.of.your.role.as.a.pediatric.medical.specialty.unit.physician..nursing.provider..medical.assistant.or.behavioral.health.care.team.member..The.purpose.of.this.study.is.to.understand.the.challenges.and.supports.of.depression.care.in.pediatric.health.care.systems....Do.you.agree.to.participate..Selecting..yes..will.lead.you.to.a.few.questions.about.your.background..Selecting..no..will.take.you.to.the.end.of.this.survey.)
# Chunk 9: race and ethnicity 1
race_table <- as.data.frame(table(df$race))
race_table <- race_table %>% dplyr::mutate(Perc = Freq/sum(Freq)*100) %>%
dplyr::arrange(desc(Freq))
race_table %>%
kable(format = "html", caption = "Number of responses by race") %>%
kable_paper(bootstrap_options = c("striped", "hover", "condensed", "responsive", full_width = F, position = "left"))
# Chunk 10: race and ethnicity 2
print(df$race_text1[df$race_text1 != ""])
print(df$race_text2[df$race_text2 != ""])
# Chunk 11: race and ethnicity 3
# Race variable as it currently exists.
table(df$race)
# Let's combine clean things up.
df <- df %>%
mutate(
race = na_if(race, ""),  # convert empty name to NA
race = recode(race,
"Other, please specify:" = "Other",
"More than one race, please specify:" = "More than one"),
race = replace_na(race, "Missing")
)
# Now let's look at our race variable.
table(df$race)
# Chunk 12: race and ethnicity 4
eth_table <- as.data.frame(table(df$ethnicity))
eth_table <- eth_table %>%
mutate(Perc = Freq/sum(Freq)*100) %>%
arrange(desc(Freq))
colnames(eth_table) <- c("Ethnicity", "Count", "%")
eth_table %>%
kable("html", caption = "Number of responses by ethnicity") %>%
kable_paper(bootstrap_options = c("striped", "hover", "condensed", "responsive", full_width = F, position = "left"))
# Chunk 13: time in position
length_table <- as.data.frame(table(df$length))
length_table$Var1 <- factor(length_table$Var1, levels = c("< 1 year", "1-3 years", "3-5 years", "5-10 years", "10+ years"), labels = c("< 1 year", "1-3 years", "3-5 years", "5-10 years", "10+ years"))
colnames(length_table) <- c("Length", "Count")
length_table %>%
arrange(Length) %>%
kable("html", caption = "Length of time in current role") %>%
kable_paper(bootstrap_options = c("striped", "hover", "condensed", "responsive", full_width = F, position = "left"))
# Chunk 14: position cleaning
df <- df %>%
mutate(
position_category = case_when(
str_detect(position, regex("nurse|outpatient RN|RN", ignore_case = TRUE)) ~ "nurse",
str_detect(position, regex("physician|fellow|Director", ignore_case = TRUE)) ~ "physician",
str_detect(position, regex("manager|administrative", ignore_case = TRUE)) ~ "administrative",
str_detect(position, regex("professor|prof", ignore_case = TRUE)) ~ "professor & physician",
str_detect(position, regex("medical|CMA", ignore_case = TRUE)) ~ "medical assistant",
TRUE ~ "other"  # Assign 'other' for any positions that don't match
)
)
table(df$position_category)
# Chunk 15: table 1
df$length <- factor(df$length, levels = c("< 1 year", "1-3 years", "3-5 years", "5-10 years", "10+ years"))
label(df$age) <- "Age (years)"
label(df$ethnicity) <- "Ethnicity"
label(df$length) <- "Time in current position<sup>a</sup>"
footnote1 <- "<sup>a</sup> 'Time was queried categorically."
table1::table1(~ age + ethnicity + length, data=df, topclass="Rtable1-zebra", caption = "Table 1. Focus group participant demographics.", footnote = c(footnote1), render.continuous=c(.="Median [Min, Max]"))
# Chunk 16: univariate plot 1
boxplot(df$age)
# Chunk 17: univariate plot 2
df %>%
ggplot(aes(age, "")) +
geom_boxplot(fill = "steelblue", color = "darkblue", outlier.color = "red", outlier.shape = 16, outlier.size = 2, alpha = 0.5) +
geom_jitter(width = 0.2, color = "darkblue", alpha = 0.4) +
geom_vline(aes(xintercept = mean(age, na.rm = TRUE)), linetype = 'dashed', color = 'red') +
annotate(x=38.9, y=1, label="Mean", geom="text", color="red") + # We also need to adjust the positioning of our geom_vline label since we have called a 'y' value and this changes the scaling.
labs(y = "", x = "Age (years)", title = "Distribution of age within sample", subtitle = "All positions") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), plot.subtitle = element_text(hjust = 0.5, face="italic"), axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks=element_blank()) +
coord_flip() # We recieve a warning message here because 2 of our respondents do not have an age value/it appears as NA.
# Chunk 18: univariate plot 3
ggplot(data = df, mapping=aes(x=age))
# Chunk 19: univariate plot 4
ggplot(data = df, mapping=aes(x=age)) +
geom_boxplot()
# Chunk 20: univariate plot 5
ggplot(data = df, mapping=aes(x=age)) +
geom_boxplot(fill = "steelblue", color = "darkblue", outlier.color = "red", outlier.shape = 16, outlier.size = 2, alpha = 0.5)
# Chunk 21: univariate color brewer
ggplot(data = df, mapping=aes(x=age)) +
geom_boxplot(fill = "#ea9999", color = "#e06666", outlier.color = "#85f6db", outlier.shape = 16, outlier.size = 2, alpha = 0.5)
# Chunk 22: univariate plot 6
ggplot(data = df, mapping=aes(x=age)) +
geom_boxplot()
# Chunk 23: univariate plot 7
ggplot(df, aes(age)) +
geom_boxplot()
# Chunk 24: univariate piping
df %>%
ggplot(., aes(age)) +
geom_boxplot()
# Chunk 25: univariate piping 2
## Filter for age
df %>%
dplyr::filter(age<40) %>%
ggplot(., aes(age)) +
geom_boxplot()
## Filter for position
df %>%
dplyr::filter(position_category == "physician" | position_category == "nurse") %>%
ggplot(aes(age)) +
geom_boxplot()
# Chunk 26: univariate labelling
df %>%
ggplot(aes(age)) +
geom_boxplot(fill = "steelblue", color = "darkblue", outlier.color = "red", outlier.shape = 16, outlier.size = 2, alpha = 0.5) +
labs(y = "", x = "Age (years)", title = "Distribution of age within sample", subtitle = "All positions") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), plot.subtitle = element_text(hjust = 0.5, face="italic"), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks=element_blank())
# Chunk 27: unviariate labelling 2
df %>%
ggplot(aes(age)) +
geom_boxplot(fill = "steelblue", color = "darkblue", outlier.color = "red", outlier.shape = 16, outlier.size = 2, alpha = 0.5) +
geom_vline(aes(xintercept = mean(age, na.rm = TRUE)), linetype = 'dashed', color = 'red') +
annotate(x=38.9, y=0.001, label="Mean", geom="text", angle=90, color="red") +
labs(y = "", x = "Age (years)", title = "Distribution of age within sample", subtitle = "All positions") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), plot.subtitle = element_text(hjust = 0.5, face="italic"), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks=element_blank())
# Chunk 28: univariate coord
# We can use the coord_flip function
df %>%
ggplot(aes(age)) +
geom_boxplot(fill = "steelblue", color = "darkblue", outlier.color = "red", outlier.shape = 16, outlier.size = 2, alpha = 0.5) +
geom_vline(aes(xintercept = mean(age, na.rm = TRUE)), linetype = 'dashed', color = 'red') +
annotate(x=38.9, y=0.001, label="Mean", geom="text", angle=90, color="red") +
labs(y = "", x = "Age (years)", title = "Distribution of age within sample", subtitle = "All positions") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), plot.subtitle = element_text(hjust = 0.5, face="italic"), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks=element_blank()) +
coord_flip()
# We can assign our age variable to the y-axis instead!
df %>%
ggplot(aes(y=age)) +
geom_boxplot(fill = "steelblue", color = "darkblue", outlier.color = "red", outlier.shape = 16, outlier.size = 2, alpha = 0.5) +
geom_vline(aes(xintercept = mean(age, na.rm = TRUE)), linetype = 'dashed', color = 'red') +
annotate(x=38.9, y=0.001, label="Mean", geom="text", angle=90, color="red") +
labs(y = "", x = "Age (years)", title = "Distribution of age within sample", subtitle = "All positions") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), plot.subtitle = element_text(hjust = 0.5, face="italic"), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks=element_blank())
# Chunk 29: coord flip
df %>%
ggplot(aes(age)) +
geom_boxplot(fill = "steelblue", color = "darkblue", outlier.color = "red", outlier.shape = 16, outlier.size = 2, alpha = 0.5) +
geom_vline(aes(xintercept = mean(age, na.rm = TRUE)), linetype = 'dashed', color = 'red') +
annotate(x=38.9, y=0.001, label="Mean", geom="text", color="red") +
labs(y = "", x = "Age (years)", title = "Distribution of age within sample", subtitle = "All positions") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), plot.subtitle = element_text(hjust = 0.5, face="italic"), axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks=element_blank()) +
coord_flip()
# Chunk 30: univariate theme customs
df %>%
ggplot(aes(age)) +
geom_boxplot(fill = "steelblue", color = "darkblue", outlier.color = "red", outlier.shape = 16, outlier.size = 2, alpha = 0.5) +
geom_vline(aes(xintercept = mean(age, na.rm = TRUE)), linetype = 'dashed', color = 'red') +
annotate(x=38.9, y=0.001, label="Mean", geom="text", color="red") +
labs(y = "", x = "Age (years)", title = "Distribution of age within sample", subtitle = "All positions") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), plot.subtitle = element_text(hjust = 0.5, face="italic"), axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks=element_blank()) +
coord_flip()
# Chunk 31: geom jitter
df %>%
ggplot(aes(age)) +
geom_boxplot(fill = "steelblue", color = "darkblue", outlier.color = "red", outlier.shape = 16, outlier.size = 2, alpha = 0.5) +
geom_jitter(width = 0.2, color = "darkblue", alpha = 0.4) +
geom_vline(aes(xintercept = mean(age, na.rm = TRUE)), linetype = 'dashed', color = 'red') +
annotate(x=38.9, y=0.001, label="Mean", geom="text", color="red") +
labs(y = "", x = "Age (years)", title = "Distribution of age within sample", subtitle = "All positions") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"), plot.subtitle = element_text(hjust = 0.5, face="italic"), axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks=element_blank()) +
coord_flip()
library(prettydoc)
df %>%
ggplot(., aes(age)) %>%
geom_histogram()
df %>%
ggplot(., aes(age)) _
df %>%
ggplot(., aes(age)) +
geom_histogram()
df %>%
ggplot(., aes(age)) +
geom_histogram() +
facet_wrap(~position_category)
df %>%
ggplot(., aes(age)) +
geom_histogram() +
facet_wrap(~ethinicity)
df %>%
ggplot(., aes(age)) +
geom_histogram() +
facet_wrap(~ethnicity)
df %>%
ggplot(., aes(age)) +
geom_line() +
facet_wrap(~ethnicity)
df %>%
ggplot(., aes(age)) +
geom_density() +
facet_wrap(~ethnicity)
df %>%
ggplot(., aes(age)) +
geom_density()
df %>%
ggplot(., aes(age)) +
geom_density() +
facet_wrap(~ethnicity)
df %>%
ggplot(., aes(age)) +
geom_density() +
facet_wrap(~ethnicity, nrow = 2, ncol = 2,
labeller = labeller(combined_language = function(x) {
sample_size <- sample_sizes %>% filter(ethnicity == x) %>% pull(sample_size)
paste0(x, " (n=", sample_size, ")")
}))
df %>%
ggplot(., aes(age)) +
geom_density() +
facet_wrap(~ethnicity, nrow = 2, ncol = 2,
labeller = labeller(ethnicity = function(x) {
sample_size <- sample_sizes %>% filter(ethnicity == x) %>% pull(sample_size)
paste0(x, " (n=", sample_size, ")")
}))
sample_sizes <- df %>%
group_by(ethnicity) %>%
summarize(sample_size = n())
sample_sizes <- df %>%
group_by(ethnicity) %>%
summarize(sample_size = n())
sample_sizes <- df %>%
group_by(ethnicity) %>%
summarize(sample_size = n())
sample_sizes <- df %>%
group_by(ethnicity) %>%
dplyr::summarize(sample_size = n())
df %>%
ggplot(aes(age)) +
geom_density() +
facet_wrap(~ethnicity, nrow = 2, ncol = 2,
labeller = labeller(ethnicity = function(x) {
sample_size <- sample_sizes %>% filter(ethnicity == x) %>% pull(sample_size)
paste0(x, " (n=", sample_size, ")")
}))
